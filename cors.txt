// Add state variable
const [isRegisteringRecalibration, setIsRegisteringRecalibration] = useState(false);

// Update onRegisterClick handler
const onRegisterClick = async () => {
  let filteredParsedList: UploadedAirscan[] = [];
  if (activeTab === DEVICEREG_TABS.RECALIBRATION) {
    setIsRegisteringRecalibration(true); // Start registration
    const parsedListToUploadJson: UploadedAirscan[] =
      lastListToUploadReCal ?? [];
    const successfulDevicesMap = new Map(
      Object.values(checkedAirscanUpload?.devices || [])
        .filter((d) => d.recalibrationStatus?.toLowerCase() === "success")
        .map((d) => [d.name, d]),
    );
    filteredParsedList = parsedListToUploadJson.filter((item) =>
      successfulDevicesMap.has(item.deviceId),
    );
  } else {
    filteredParsedList = lastListToUploadNonCal ?? [];
  }

  setModalState({
    open: true,
    message:
      "Register the test WellStat Air devices? This will allow them to be assigned to existing buildings.",
    onConfirm: async () => {
      await dispatch(
        orphanUploadedAirscans({ uploadedAirscans: filteredParsedList }),
      );
      await dispatch(
        updateCalibrationTimestamp({
          uuid,
          timestamp: false,
          listtoupload: "",
        }),
      );
      setModalState((prev) => ({ ...prev, open: false }));
      if (activeTab === DEVICEREG_TABS.RECALIBRATION) {
        setIsRegisteringRecalibration(false); // End registration
      }
    },
    hideFooter: false,
  });
};

// Update button disabled logic
<Button
  color="primary"
  onClick={onRegisterClick}
  disabled={
    activeTab === DEVICEREG_TABS.RECALIBRATION
      ? registerAfterRecalibrationDisabled || isRegisteringRecalibration
      : registerBtnDisabled
  }
>
  Register Device(s)
</Button>

if (activeTab === "recalibration") {
          state.checkedAirscanUploadReCal = {
            ...state.checkedAirscanUploadReCal,
            devices: {},
          };
        } else {
          state.checkedAirscanUploadNonCal = response;
        }E461D4064F265429
NPT-93379-002
.inner-card {
  margin-bottom: 2rem;
  box-shadow: 0 4px 24px 0 rgba(34, 41, 47, 0.1);
  border-radius: 25px;
  transition:
    all 0.3s ease-in-out,
    background 0s,
    color 0s,
    border-color 0s;
}

.custom-card {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
}

.left-line {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 5px;
  border-radius: 0;
}

.device-button-group .btn {
  font-size: 18px;
}

// Marker hover area
.map-marker-hover-area {
  position: absolute;
  width: 40px;
  height: 40px;
  cursor: pointer;
  background-color: transparent;
  z-index: 1000;
}

// Tooltip styling
.tooltip.custom-map-tooltip .arrow::before,
.custom-map-tooltip .arrow::before,
.tooltip.custom-map-tooltip .tooltip-arrow,
.custom-map-tooltip .tooltip-arrow {
  background: white !important;
  border: none !important;
}

// Ensure tooltip background is white and text is black, override Reactstrap defaults
.tooltip.custom-map-tooltip,
.custom-map-tooltip {
  background-color: #fff !important;
  color: #000 !important;
  border: 1px solid #ccc !important;
  border-radius: 8px !important;
  box-shadow: none !important;
  padding: 10px !important;
  max-width: 250px !important;
  z-index: 9999 !important;
  text-align: left !important;
}

.tooltip.custom-map-tooltip .tooltip-inner,
.custom-map-tooltip .tooltip-inner {
  background-color: #fff !important;
  color: #000 !important;
  border-radius: 8px !important;
  box-shadow: none !important;
  text-align: left !important;
}

.custom-map-tooltip-content {
  text-align: left;
}

.custom-map-tooltip-row {
  margin-bottom: 6px;
  font-size: 12px;
}

.equipment-map-container {
  display: flex;
  height: 100%;
}

.device-calibration-datepicker .form-control[readonly] {
  background-color: #fff !important;
  opacity: 1 !important;
}
.dark-layout .device-calibration-datepicker .form-control[readonly] {
  background-color: #283046 !important;
  opacity: 1 !important;
}
// Device cards grid: always 4 columns, consistent width, with spacing from filter
.mini-cards-container {
  display: grid;
  grid-template-columns: repeat(4, minmax(220px, 1fr));
  gap: 16px;
  margin-top: 24px;
  
  &.vertical {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin-top: 24px;
  }
}

.mini-card-wrapper {
  width: 100%;
  max-width: 320px;
  min-width: 220px;
  margin: 0 auto;
}



.filter-row {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;

  .filter-col.horizontal {
    flex: 1;        
    min-width: 200px;  
  }

  .filter-col.vertical {
    flex: 1 1 100%;   
  }
}



